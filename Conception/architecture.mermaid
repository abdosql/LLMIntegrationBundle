    classDiagram
        %% Main Bundle Classes
        class LlmIntegrationBundle {
            +build(ContainerBuilder $container)
            +getContainerExtension(): ExtensionInterface
            +getPath(): string
        }
        class Configuration {
            +getConfigTreeBuilder(): TreeBuilder
        }
        class LlmIntegrationExtension {
            +load(array $configs, ContainerBuilder $container)
            +getAlias(): string
        }

        %% Interfaces
        class AiClientInterface {
            <<interface>>
            +sendPrompt(string $prompt, ?string $model): AiResponse
        }
        class AiServiceInterface {
            <<interface>>
            +generate(string $prompt, array $options): AiResponse
            +getProviderName(): string
            +getCurrentModel(): string
            +setModel(string $model): void
        }

        %% Client Classes
        class ApiTogetherClient {
            -httpClient: HttpClientInterface
            -eventDispatcher: EventDispatcherInterface
            -apiKey: string
            -defaultModel: string
            +__construct(HttpClientInterface $httpClient, EventDispatcherInterface $eventDispatcher, string $apiKey, string $defaultModel)
            +sendPrompt(string $prompt, ?string $model): AiResponse
        }
        class OpenAiClient {
            -httpClient: HttpClientInterface
            -eventDispatcher: EventDispatcherInterface
            -apiKey: string
            -defaultModel: string
            +__construct(HttpClientInterface $httpClient, EventDispatcherInterface $eventDispatcher, string $apiKey, string $defaultModel)
            +sendPrompt(string $prompt, ?string $model): AiResponse
        }

        %% Service Classes
        class AiServiceFactory {
            -container: ContainerInterface
            +__construct(ContainerInterface $container)
            +create(string $provider): AiServiceInterface
        }
        class ApiTogetherService {
            -client: AiClientInterface
            -model: string
            +__construct(AiClientInterface $client, string $model)
            +generate(string $prompt, array $options): AiResponse
            +getProviderName(): string
            +getCurrentModel(): string
            +setModel(string $model): void
        }
        class OpenAiService {
            -client: AiClientInterface
            -model: string
            +__construct(AiClientInterface $client, string $model)
            +generate(string $prompt, array $options): AiResponse
            +getProviderName(): string
            +getCurrentModel(): string
            +setModel(string $model): void
        }

        %% Command
        class CreateAiServiceCommand {
            -factory: AiServiceFactory
            +__construct(AiServiceFactory $factory)
            +execute(InputInterface $input, OutputInterface $output): int
        }

        %% Exceptions
        class LlmIntegrationException {
            <<abstract>>
        }
        class AiClientException {
            +NAME: string
            +__construct(string $message, ?Throwable $previous = null)
        }
        class InvalidConfigurationException {
            +NAME: string
            +__construct(string $message, ?Throwable $previous = null)
        }
        class ModelNotFoundException {
            +NAME: string
            +__construct(string $message, ?Throwable $previous = null)
        }
        class ProviderNotFoundException {
            +NAME: string
            +__construct(string $message, ?Throwable $previous = null)
        }

        %% Event Classes
        class LlmIntegrationExceptionEvent {
            -exception: LlmIntegrationException
            +__construct(LlmIntegrationException $exception)
            +getException(): LlmIntegrationException
        }
        class LlmIntegrationExceptionListener {
            -logger: LoggerInterface
            +__construct(LoggerInterface $logger)
            +onException(LlmIntegrationExceptionEvent $event): void
        }

        %% Attributes
        class AiClient {
            <<attribute>>
            +provider: string
            +__construct(string $provider)
        }
        class AiServiceProvider {
            <<attribute>>
            +provider: string
            +__construct(string $provider)
        }

        %% Compiler Passes
        class AiClientConfigurationPass {
            +process(ContainerBuilder $container)
        }
        class AiServiceAutoRegisterPass {
            +process(ContainerBuilder $container)
        }

        %% Response Class
        class AiResponse {
            -status: string
            -data: array
            -metadata: ?array
            +__construct(string $status, array $data, ?array $metadata)
            +getStatus(): string
            +getData(): array
            +getMetadata(): ?array
            +get(string $key, mixed $default = null): mixed
        }

        %% Relationships
        LlmIntegrationBundle --|> Bundle
        LlmIntegrationBundle --> Configuration
        LlmIntegrationBundle --> LlmIntegrationExtension
        LlmIntegrationBundle --> AiClientConfigurationPass
        LlmIntegrationBundle --> AiServiceAutoRegisterPass
        LlmIntegrationExtension --> Configuration
        LlmIntegrationExtension --> AiServiceFactory
        ApiTogetherClient ..|> AiClientInterface
        OpenAiClient ..|> AiClientInterface
        ApiTogetherService ..|> AiServiceInterface
        OpenAiService ..|> AiServiceInterface
        ApiTogetherService --> AiClientInterface
        OpenAiService --> AiClientInterface
        CreateAiServiceCommand --|> Command
        CreateAiServiceCommand --> AiServiceFactory
        AiClientException --|> LlmIntegrationException
        InvalidConfigurationException --|> LlmIntegrationException
        ModelNotFoundException --|> LlmIntegrationException
        ProviderNotFoundException --|> LlmIntegrationException
        LlmIntegrationException --|> Exception
        LlmIntegrationExceptionListener --> LlmIntegrationExceptionEvent
        AiClientConfigurationPass --|> CompilerPassInterface
        AiServiceAutoRegisterPass --|> CompilerPassInterface
        AiServiceFactory --> AiServiceInterface
        ApiTogetherClient --> AiResponse
        OpenAiClient --> AiResponse
        ApiTogetherService --> AiResponse
        OpenAiService --> AiResponse
        ApiTogetherClient --> AiClient
        OpenAiClient --> AiClient
        ApiTogetherService --> AiServiceProvider
        OpenAiService --> AiServiceProvider